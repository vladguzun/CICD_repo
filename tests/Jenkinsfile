pipeline {
  agent any
  options { ansiColor('xterm'); timestamps() }

  environment {
    IMAGE = 'vladdocker/cicd-flask'
    TAG   = "${env.BUILD_NUMBER}"
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Unit tests (venv in python:3.11-slim)') {
      steps {
        script {
          docker.image('python:3.11-slim').inside('-e HOME=/tmp') {
            sh '''
              set -e
              export PYTHONPATH=$PWD
              python -m venv .venv
              . .venv/bin/activate
              python --version
              pip install -U pip
              [ -f requirements.txt ] && pip install -r requirements.txt
              pip install pytest
              [ -d tests ] && pytest -q || echo "No tests/ directory, skipping"
            '''
          }
        }
      }
    }

    stage('Docker build') {
      steps {
        sh '''
          set -e
          docker build -t "$IMAGE:$TAG" -t "$IMAGE:latest" .
        '''
      }
    }

    stage('Smoke test (no host port)') {
      steps {
        sh '''
          set -e

          echo "== Existing containers =="
          docker ps --format "{{.Names}} -> {{.Ports}}"

          # Ensure previous test container is gone
          docker rm -f cicd-flask-test >/dev/null 2>&1 || true

          # Run WITHOUT -p; we'll call it by its container IP
          docker run -d --rm --name cicd-flask-test "$IMAGE:latest"

          # Get the container's bridge IP (172.17.x.x)
          IP="$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' cicd-flask-test)"
          echo "Container IP: $IP"

          # Wait up to ~30s for /health
          ok=0
          for i in $(seq 1 30); do
            if curl -fsS "http://$IP:8000/health" >/dev/null 2>&1; then
              ok=1; break
            fi
            sleep 1
          done

          if [ "$ok" != "1" ]; then
            echo "Healthcheck FAILED at http://$IP:8000/health"
            echo "== Container logs =="
            docker logs cicd-flask-test || true
            exit 1
          fi

          echo "Healthcheck OK at http://$IP:8000/health"
        '''
      }
      post {
        always { sh 'docker rm -f cicd-flask-test >/dev/null 2>&1 || true' }
      }
    }

    stage('Docker push') {
      when { expression { return true } } // set false to skip push
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DH_USER', passwordVariable: 'DH_PASS')]) {
          sh '''
            set -e
            echo "$DH_PASS" | docker login -u "$DH_USER" --password-stdin
            docker push "$IMAGE:$TAG"
            docker push "$IMAGE:latest"
          '''
        }
      }
    }
  }

  post {
    always { echo "Build finished with status: ${currentBuild.currentResult}" }
  }
}
